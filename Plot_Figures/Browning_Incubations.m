%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /Users/baw1d17/GitHub/Diatom_supply_ratios/Data/Browning_2023_S1.xlsx
%    Worksheet: Table_S1_Browning_Moore_Bioassa
%
% Auto-generated by MATLAB on 23-Sep-2025 13:11:49

%% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 28);

% Specify sheet and range
opts.Sheet = "Table_S1_Browning_Moore_Bioassa";
opts.DataRange = "A2:AB1039";

% Specify column names and types
opts.VariableNames = ["Reference", "Citation", "Longitude", "Latitude", "ExperimentNumber", "Treatment", "NumberOfAddedNutrients", "N_add", "P_add", "Si_add", "Fe_add", "Co_add", "Zn_add", "Mn_add", "B12_add", "Temperature", "InitialNitrate", "InitialPhosphate", "InitialSilicicAcid", "InitialFe", "InitialCo", "InitialZn", "InitialMn", "ExperimentDuration", "PrimaryLimitingNutrient", "SecondaryLimitingNutrient", "TertiaryLimitingNutrient", "Chlorophylla"];
opts.VariableTypes = ["double", "categorical", "double", "double", "double", "categorical", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "categorical", "categorical", "string", "double"];

% Specify variable properties
opts = setvaropts(opts, "TertiaryLimitingNutrient", "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Citation", "Treatment", "PrimaryLimitingNutrient", "SecondaryLimitingNutrient", "TertiaryLimitingNutrient"], "EmptyFieldRule", "auto");

% Import the data
Browning2023S1 = readtable("/Users/baw1d17/GitHub/Diatom_supply_ratios/Data/Browning_2023_S1.xlsx", opts, "UseExcel", false);


% Clear temporary variables
clear opts
%%

i_limiting = {'Fe','N','Si','P','N_Fe','N_Fe_sep','Fe_Co','Fe_Mn','Fe_Zn_sep','N_P','Fe_P','Si'};
clrs = {0.8.*[1 0 0;1 0 0],...
        0.8.*[0 0 1;0 0 1],...
        0.8.*[0 1 0;0 1 0],...
        0.8.*[0 0 0;0 0 0],...
        0.8.*[0 0 1;1 0 0]...
        0.8.*[0 0 1;1 0 0]...
        0.8.*[1 0 0;1 1 1]...
        0.8.*[1 0 0;1 1 1]...
        0.8.*[1 0 0;1 1 1]...
        0.8.*[0 0 1;0 0 0]...
        0.8.*[1 0 0;0 0 0]...
        0.8.*[0 1 0;0 1 0]};

% for i=1:numel(i_limiting)
%     ilim = find(Browning2023S1.PrimaryLimitingNutrient==i_limiting{i});
%     lats = Browning2023S1.Latitude(ilim);
%     lons = Browning2023S1.Longitude(ilim);
%     clr1  = clrs{i}(1,:);
%     clr2  = clrs{i}(2,:);
%     coords = unique([lats lons],'rows');
% 
%     plot_semicircle_circles(axh,coords, 2, [0.5 0.5 0.5], [0.5 0.5 0.5], 500)
% end
% 
% for i=1:numel(i_limiting)
%     ilim = find(Browning2023S1.SecondaryLimitingNutrient==i_limiting{i});
%     lats = Browning2023S1.Latitude(ilim);
%     lons = Browning2023S1.Longitude(ilim);
%     clr1  = clrs{i}(1,:);
%     clr2  = clrs{i}(2,:);
%     coords = unique([lats lons],'rows');
% 
%     plot_semicircle_circles(axh,coords, 2, clr1, clr2, 500)
% end

for i=1:numel(i_limiting)
    ilim = find(Browning2023S1.PrimaryLimitingNutrient==i_limiting{i});
    lats = Browning2023S1.Latitude(ilim);
    lons = Browning2023S1.Longitude(ilim);
    clr1  = clrs{i}(1,:);
    clr2  = clrs{i}(2,:);
    coords = unique([lats lons],'rows');
    
    plot_semicircle_circles(axh,coords, 1.5, clr1, clr2, 500)
end

%%
% plot_semicircle_circles.m
% Plot N circles at given coordinates, each made of two differently coloured semicircles.
function plot_semicircle_circles(axh,centers, radius, colL, colR, nPoints)
    if nargin < 2 || isempty(radius), radius = 1; end
    if nargin < 3 || isempty(colL), colL = [0.85, 0.33, 0.10]; end
    if nargin < 4 || isempty(colR), colR = [0, 0.45, 0.74]; end
    if nargin < 5 || isempty(nPoints), nPoints = 400; end
    
    % Semicircle angles
    thetaL = linspace(pi/2, 3*pi/2, round(nPoints/2));
    thetaR = linspace(-pi/2, pi/2, round(nPoints/2));
    tFull  = linspace(0, 2*pi, 800);
    
    for k = 1:size(centers,1)
        c = centers(k,:);
        
        % Left semicircle
        xL = c(1) + radius*sin(thetaL);
        yL = c(2) + radius*cos(thetaL);
        h1 = patchm([xL, xL(1)], [yL, yL(1)], colL);
        h1.EdgeColor = 'none';
        
        % Right semicircle
        xR = c(1) + radius*sin(thetaR);
        yR = c(2) + radius*cos(thetaR);
        h2 = patchm([xR, xR(1)], [yR, yR(1)], colR);
        h2.EdgeColor = 'none';

        % Border
        % plot(c(1) + radius*cos(tFull), c(2) + radius*sin(tFull), ...
        %      'k', 'LineWidth', 1);
    end
end

% Example usage:
% Define N coordinates
% centers = [0 0; 3 0; 0 3; 3 3];   % 4 centers
% plot_semicircle_circles(centers, 1, [1 0.6 0.2], [0.2 0.6 1], 600)